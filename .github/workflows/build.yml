name: Build Packages

on:
  release:
      types:
        - created

permissions:
  contents: write

jobs:
  win-build:
    name: Build Package (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: .\wfdata
    outputs:
      pkg_version: ${{ steps.pkginfo.outputs.pkg_version }}
      pkg_name: ${{ steps.pkginfo.outputs.pkg_name }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Get Package Info
      id: pkginfo
      shell: bash
      run: |
        # Extract the version from setup.py
        ver=$(grep 'version' setup.py | awk -F'=' '{print $2}' | tr -d "',\"")  # 1.0.0
        echo "pkg_version=${ver}" >> $GITHUB_OUTPUT
        echo "pkg_name=DataManager-Wave_${ver}.exe" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -c "import sys;print(sys.version)"
        python -m pip install --upgrade pip
        pip install flake8 wheel setuptools
        if (Test-Path -Path .\requirements.txt) {
          python -m pip install -r requirements.txt
        }

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build wheels
      run: |
        python setup.py bdist_wheel

    - name: Build with PyInstaller
      run: |
        python -m pip install --find-links=.\dist dm.wfdata -U
        cd pkg
        python -m pip install -r requirements.txt
        pyinstaller dm-wave.py --hidden-import='PIL._tkinter_finder' `
          --exclude-module scipy `
          --noconfirm --clean --icon ./icons/icon.ico `
          --distpath .\dist

    - name: Update Inno Setup ISS
      shell: bash
      run: |
        cd ./wfdata/pkg/win
        sed -i "/define MyAppVersion/s/.*/#define MyAppVersion \"${{ steps.pkginfo.outputs.pkg_version }}\"/" setup.iss

    - name: Create Inno Setup Installer
      uses: nadeemjazmawe/inno-setup-action-cli@v6.0.5
      with:
        filepath: .\wfdata\pkg\win\setup.iss

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: .installer-windows.TBD
        path: .\wfdata\pkg\win\output\${{ steps.pkginfo.outputs.pkg_name }}
        retention-days: 0

  Release:
    needs: win-build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: .installer-windows.TBD
          path: ./dist

      - name: List artifacts
        run: ls -lhtr ./dist

      - name: Create a new release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./dist/${{ needs.win-build.outputs.pkg_name }}

  Clean:
    needs: Release
    runs-on: ubuntu-latest
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: .installer-windows.TBD
