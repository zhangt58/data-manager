name: Build Packages

on:
  push:
    tags:
      - 'v*'
  release:
      types:
        - published

jobs:
#  linux-build:
#    name: Build Package (Linux)
#    strategy:
#      matrix:
#        os: ["ubuntu-22.04"]
#        py: ["3.10",]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#        working-directory: ./wfdata
#
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@v4
#      with:
#        persist-credentials: false
#
#    - name: Set package name
#      id: set_pkgname
#      run: |
#        # Extract the version from the Git tag (e.g., v1.0.0 -> 1.0.0)
#        ver=${GITHUB_REF#refs/tags/v}
#        echo "name=dm-wave_v${ver}_${{ matrix.os }}_py${{ matrix.py }}" >> $GITHUB_OUTPUT  # Make the version available to subsequent steps
#
#    - name: Set up Python ${{ matrix.py }}
#      uses: actions/setup-python@v5
#      with:
#        python-version: ${{ matrix.py }}
#
#    - name: Install dependencies
#      run: |
#        python -c "import sys;print(sys.version)"
#        python -m pip install --upgrade pip
#        pip install flake8 wheel setuptools
#        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
#
#    - name: Lint with flake8
#      run: |
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#
#    - name: Build wheels
#      run: |
#        python setup.py bdist_wheel
#
#    - name: Build with PyInstaller
#      run: |
#        python -m pip install --find-links=./dist dm.wfdata -U
#        cd pkg
#        python -m pip install -r requirements.txt
#        pyinstaller dm-wave.py --hidden-import='PIL._tkinter_finder' \
#          --noconfirm --clean --icon ./icons/icon.ico
#        cd dist && tar cv dm-wave | xz -9 > ../${{ steps.set_pkgname.outputs.name }}.tar.xz
#
#    - name: Upload artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: Bundled binaries - ${{ matrix.os }} Python ${{ matrix.py }}
#        path: ./wfdata/pkg/${{ steps.set_pkgname.outputs.name }}.tar.xz
#        retention-days: 7

  win-build:
    name: Build Package (Windows)
    strategy:
      matrix:
        py: ["3.10",]
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: .\wfdata

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Set package name
      id: set_pkgname
      shell: bash
      run: |
        # Extract the version from the Git tag (e.g., v1.0.0 -> 1.0.0)
        ver=${GITHUB_REF#refs/tags/v}
        echo "version=${ver}" >> $GITHUB_OUTPUT
        echo "name=dm-wave_v${ver}_Windows_py${{ matrix.py }}" >> $GITHUB_OUTPUT  # Make the version available to subsequent steps

    - name: Set up Python ${{ matrix.py }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.py }}

    - name: Install dependencies
      run: |
        python -c "import sys;print(sys.version)"
        python -m pip install --upgrade pip
        pip install flake8 wheel setuptools
        if (Test-Path -Path .\requirements.txt) {
          python -m pip install -r requirements.txt
        }

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build wheels
      run: |
        python setup.py bdist_wheel

    - name: Build with PyInstaller
      run: |
        python -m pip install --find-links=.\dist dm.wfdata -U
        cd pkg
        python -m pip install -r requirements.txt
        pyinstaller dm-wave.py --hidden-import='PIL._tkinter_finder' `
          --exclude-module scipy `
          --noconfirm --clean --icon ./icons/icon.ico
        cd dist
        Compress-Archive -Path .\dm-wave -DestinationPath ..\${{ steps.set_pkgname.outputs.name }}.zip

    - name: Create Inno Setup Installer
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
      with:
        path: .\wfdata\pkg\win\setup.iss
        options: /O+

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Bundled binaries - Windows Python ${{ matrix.py }}
        path: .\wfdata\pkg\${{ steps.set_pkgname.outputs.name }}.zip
        retention-days: 7

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Bundled installer - Windows Python ${{ matrix.py }}
        path: .\wfdata\pkg\win\output\DataManager-Wave_${{ steps.set_pkgname.outputs.version }}.exe
        retention-days: 7
